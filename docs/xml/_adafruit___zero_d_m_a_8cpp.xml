<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_adafruit___zero_d_m_a_8cpp" kind="file" language="C++">
    <compoundname>Adafruit_ZeroDMA.cpp</compoundname>
    <includes refid="_adafruit___zero_d_m_a_8h" local="no">Adafruit_ZeroDMA.h</includes>
    <includes local="no">malloc.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="dma_8h" local="yes">utility/dma.h</includes>
    <incdepgraph>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="1">
        <label>libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp</label>
        <link refid="_adafruit___zero_d_m_a_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Adafruit_ZeroDMA.h</label>
        <link refid="_adafruit___zero_d_m_a_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>utility/dma.h</label>
        <link refid="dma_8h"/>
      </node>
      <node id="5">
        <label>malloc.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="_adafruit___zero_d_m_a_8cpp_1a4560f2a27bd19d833ccca47ac113a009" prot="public" static="no">
        <name>MAX_JOB_RESUME_COUNT</name>
        <initializer>10000</initializer>
        <briefdescription>
<para>Loop iteration threshold for timeout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="395" column="9" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="395" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_adafruit___zero_d_m_a_8cpp_1afeacde8f765003ae5ee54a8ad13bbea1" prot="public" static="yes" mutable="no">
        <type>volatile uint32_t</type>
        <definition>volatile uint32_t _channelMask</definition>
        <argsstring></argsstring>
        <name>_channelMask</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="43" column="26" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_adafruit___zero_d_m_a_8cpp_1a42d541791f7c062fec23948e8bac7e57" prot="public" static="no" mutable="no">
        <type>_writeback[DMAC_CH_NUM]</type>
        <definition>_writeback [DMAC_CH_NUM] SECTION_DMAC_DESCRIPTOR</definition>
        <argsstring></argsstring>
        <name>SECTION_DMAC_DESCRIPTOR</name>
        <briefdescription>
<para>&lt; Descriptor table </para>
        </briefdescription>
        <detaileddescription>
<para>Writeback table </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="48" column="16" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_adafruit___zero_d_m_a_8cpp_1a842d20efcbdb6e68e6a253b92e7f2d79" prot="public" static="yes" mutable="no">
        <type><ref refid="class_adafruit___zero_d_m_a" kindref="compound">Adafruit_ZeroDMA</ref> *</type>
        <definition>Adafruit_ZeroDMA* _dmaPtr[DMAC_CH_NUM]</definition>
        <argsstring>[DMAC_CH_NUM]</argsstring>
        <name>_dmaPtr</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="53" column="25" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="variable" id="_adafruit___zero_d_m_a_8cpp_1a763a276ff53d35d8b35719c5546dbc30" prot="public" static="yes" mutable="no">
        <type>volatile unsigned long</type>
        <definition>volatile unsigned long cpu_irq_critical_section_counter</definition>
        <argsstring></argsstring>
        <name>cpu_irq_critical_section_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="57" column="31" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_adafruit___zero_d_m_a_8cpp_1a0f17a260fe90b7f4b56fcb4fe5258d86" prot="public" static="yes" mutable="no">
        <type>volatile unsigned char</type>
        <definition>volatile unsigned char cpu_irq_prev_interrupt_state</definition>
        <argsstring></argsstring>
        <name>cpu_irq_prev_interrupt_state</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="58" column="31" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_adafruit___zero_d_m_a_8cpp_1a35977139f9fecb36af64baf1b69a559a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((__aligned__(16))) static DmacDescriptor _descriptor[DMAC_CH_NUM] SECTION_DMAC_DESCRIPTOR</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(__aligned__(16))</type>
        </param>
        <briefdescription>
<para>&lt; 128 bit alignment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_adafruit___zero_d_m_a_8cpp_1a096bb857252d4764883c00b541106287" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cpu_irq_enter_critical</definition>
        <argsstring>(void)</argsstring>
        <name>cpu_irq_enter_critical</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="60" column="13" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="60" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="_adafruit___zero_d_m_a_8cpp_1a9cbf640f8e8e019c5c25933611608eb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cpu_irq_leave_critical</definition>
        <argsstring>(void)</argsstring>
        <name>cpu_irq_leave_critical</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="75" column="13" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="75" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_adafruit___zero_d_m_a_8cpp_1a8e064c26f3a32acb9fcd7bfac1fc45a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMAC_Handler</definition>
        <argsstring>(void)</argsstring>
        <name>DMAC_Handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This is a C function that exists outside the <ref refid="class_adafruit___zero_d_m_a" kindref="compound">Adafruit_ZeroDMA</ref> context. DMA channel number is determined from the INTPEND register, from this we get a ZeroDMA object pointer through the _dmaPtr[] array. (It&apos;s done this way because jobStatus and callback[] are protected elements in the ZeroDMA object <ndash/> we can&apos;t touch them in C, but the next function after this, being part of the ZeroDMA class, can.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" line="124" column="6" bodyfile="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp" bodystart="124" bodyend="144"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_adafruit___zero_d_m_a_8h" kindref="compound">Adafruit_ZeroDMA.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;malloc.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>memalign()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_TINYUSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>Serial<sp/>when<sp/>selecting<sp/>TinyUSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Adafruit_TinyUSB.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DMAC_RESERVED_CHANNELS<sp/></highlight><highlight class="comment">//<sp/>SAMD<sp/>core<sp/>&gt;<sp/>1.2.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dma_8h" kindref="compound">dma.h</ref>&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>_descriptor[]<sp/>and<sp/>_writeback[]<sp/>are<sp/>extern&apos;d<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>_channelMask<sp/>=<sp/>DMAC_RESERVED_CHANNELS;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dma_8h" kindref="compound">utility/dma.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>_channelMask<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Bitmask<sp/>of<sp/>allocated<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DMA<sp/>descriptor<sp/>list<sp/>entry<sp/>point<sp/>(and<sp/>writeback<sp/>buffer)<sp/>per<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="_adafruit___zero_d_m_a_8cpp_1a35977139f9fecb36af64baf1b69a559a" kindref="member">__attribute__</ref>((__aligned__(16)))<sp/>static<sp/>DmacDescriptor<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>_descriptor[DMAC_CH_NUM]<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a42d541791f7c062fec23948e8bac7e57" kindref="member">SECTION_DMAC_DESCRIPTOR</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>_writeback[DMAC_CH_NUM]<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a42d541791f7c062fec23948e8bac7e57" kindref="member">SECTION_DMAC_DESCRIPTOR</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>ZeroDMA<sp/>object<sp/>for<sp/>each<sp/>channel<sp/>is<sp/>needed<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ISR<sp/>(in<sp/>C,<sp/>outside<sp/>of<sp/>class<sp/>context)<sp/>to<sp/>access<sp/>callbacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a" kindref="compound">Adafruit_ZeroDMA</ref><sp/>*_dmaPtr[DMAC_CH_NUM]<sp/>=<sp/>{0};<sp/></highlight><highlight class="comment">//<sp/>Init<sp/>to<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adapted<sp/>from<sp/>ASF3<sp/>interrupt_sam_nvic.c:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>cpu_irq_critical_section_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cpu_irq_prev_interrupt_state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cpu_irq_enter_critical(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cpu_irq_critical_section_counter)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__get_PRIMASK()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>IRQ<sp/>enabled?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__disable_irq();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__DMB();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cpu_irq_prev_interrupt_state<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>to<sp/>save<sp/>the<sp/>prev<sp/>state<sp/>as<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cpu_irq_prev_interrupt_state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>cpu_irq_critical_section_counter++;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cpu_irq_leave_critical(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>user<sp/>is<sp/>trying<sp/>to<sp/>leave<sp/>a<sp/>critical<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>not<sp/>in<sp/>a<sp/>critical<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cpu_irq_critical_section_counter<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_critical_section_counter--;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>enable<sp/>global<sp/>interrupts<sp/>when<sp/>the<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reaches<sp/>0<sp/>and<sp/>the<sp/>state<sp/>of<sp/>the<sp/>global<sp/>interrupt<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>enabled<sp/>when<sp/>entering<sp/>critical<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!cpu_irq_critical_section_counter)<sp/>&amp;&amp;<sp/>cpu_irq_prev_interrupt_state)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__DMB();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__enable_irq();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSTRUCTOR<sp/>-------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor<sp/>initializes<sp/>Adafruit_ZeroDMA<sp/>basics<sp/>but<sp/>does<sp/>NOT<sp/>allocate<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DMA<sp/>channel<sp/>(that&apos;s<sp/>done<sp/>in<sp/>allocate())<sp/>or<sp/>start<sp/>a<sp/>job<sp/>(that&apos;s<sp/>done<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>startJob()).<sp/><sp/>This<sp/>is<sp/>because<sp/>constructors<sp/>in<sp/>a<sp/>global<sp/>context<sp/>are<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before<sp/>a<sp/>sketch&apos;s<sp/>setup()<sp/>function,<sp/>which<sp/>may<sp/>have<sp/>some<sp/>other<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialization<sp/>of<sp/>its<sp/>own,<sp/>don&apos;t<sp/>want<sp/>it<sp/>clobbering<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">Adafruit_ZeroDMA::Adafruit_ZeroDMA(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>=<sp/>0xFF;<sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>not<sp/>yet<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>DMA_STATUS_OK;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a84ae85a6a87a1388b5e070bb804500c1" kindref="member">hasDescriptors</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>descriptors<sp/>allocated<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a681b8ea014c7d8e198218756700d8926" kindref="member">loopFlag</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1aa276d20e9ef4b3f8cbcd8cf569497923" kindref="member">peripheralTrigger</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Software<sp/>trigger<sp/>only<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1aef6d75fa171d1be7daec125b7a347363" kindref="member">triggerAction</ref><sp/>=<sp/>DMA_TRIGGER_ACTON_TRANSACTION;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>memset(<ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>));</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>destructor?<sp/>Should<sp/>stop<sp/>job,<sp/>delete<sp/>descriptors,<sp/>free<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERRUPT<sp/>SERVICE<sp/>ROUTINE<sp/>-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DMAC_0_Handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a8e064c26f3a32acb9fcd7bfac1fc45a6" kindref="member">DMAC_Handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>uint8_t<sp/>channel<sp/>=<sp/>DMAC-&gt;INTPEND.bit.ID;<sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>#<sp/>causing<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel<sp/>&lt;<sp/>DMAC_CH_NUM)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a" kindref="compound">Adafruit_ZeroDMA</ref><sp/>*dma;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dma<sp/>=<sp/>_dmaPtr[channel]))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>Channel&apos;s<sp/>ZeroDMA<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>IRQ<sp/>handler<sp/>with<sp/>channel<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dma-&gt;<ref refid="class_adafruit___zero_d_m_a_1aefe46f2eb389ac5aac4ebfdb13a620d0" kindref="member">_IRQhandler</ref>(channel);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/>channel;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>IRQ<sp/>handler<sp/>with<sp/>interrupt<sp/>flag(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dma-&gt;<ref refid="class_adafruit___zero_d_m_a_1aefe46f2eb389ac5aac4ebfdb13a620d0" kindref="member">_IRQhandler</ref>(DMAC-&gt;CHINTFLAG.reg);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DMAC_1_Handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a35977139f9fecb36af64baf1b69a559a" kindref="member">__attribute__</ref>((weak,<sp/>alias(</highlight><highlight class="stringliteral">&quot;DMAC_0_Handler&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DMAC_2_Handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a35977139f9fecb36af64baf1b69a559a" kindref="member">__attribute__</ref>((weak,<sp/>alias(</highlight><highlight class="stringliteral">&quot;DMAC_0_Handler&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DMAC_3_Handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a35977139f9fecb36af64baf1b69a559a" kindref="member">__attribute__</ref>((weak,<sp/>alias(</highlight><highlight class="stringliteral">&quot;DMAC_0_Handler&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DMAC_4_Handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a35977139f9fecb36af64baf1b69a559a" kindref="member">__attribute__</ref>((weak,<sp/>alias(</highlight><highlight class="stringliteral">&quot;DMAC_0_Handler&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1aefe46f2eb389ac5aac4ebfdb13a620d0" kindref="member">Adafruit_ZeroDMA::_IRQhandler</ref>(uint8_t<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;flags&apos;<sp/>is<sp/>initially<sp/>passed<sp/>in<sp/>as<sp/>channel<sp/>number,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>which<sp/>we<sp/>look<sp/>up<sp/>the<sp/>actual<sp/>interrupt<sp/>flags...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>flags<sp/>=<sp/>DMAC-&gt;Channel[flags].CHINTFLAG.reg;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DMAC_CHINTENCLR_TERR)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>error<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHINTFLAG.reg<sp/>=<sp/>DMAC_CHINTENCLR_TERR;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHINTFLAG.reg<sp/>=<sp/>DMAC_CHINTENCLR_TERR;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>DMA_STATUS_ERR_IO;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[DMA_CALLBACK_TRANSFER_ERROR])</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[DMA_CALLBACK_TRANSFER_ERROR](</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DMAC_CHINTENCLR_TCMPL)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>transfer<sp/>complete<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHINTFLAG.reg<sp/>=<sp/>DMAC_CHINTENCLR_TCMPL;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHINTFLAG.reg<sp/>=<sp/>DMAC_CHINTENCLR_TCMPL;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>DMA_STATUS_OK;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[DMA_CALLBACK_TRANSFER_DONE])</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[DMA_CALLBACK_TRANSFER_DONE](</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DMAC_CHINTENCLR_SUSP)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>channel<sp/>suspend<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHINTFLAG.reg<sp/>=<sp/>DMAC_CHINTENCLR_SUSP;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHINTFLAG.reg<sp/>=<sp/>DMAC_CHINTENCLR_SUSP;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>DMA_STATUS_SUSPEND;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[DMA_CALLBACK_CHANNEL_SUSPEND])</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[DMA_CALLBACK_CHANNEL_SUSPEND](</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DMA<sp/>CHANNEL<sp/>FUNCTIONS<sp/>---------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>channel<sp/>for<sp/>ZeroDMA<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="_adafruit___zero_d_m_a_8h_1ac32982e07d7b05efd5807bce8819a686" kindref="member">ZeroDMAstatus</ref><sp/><ref refid="class_adafruit___zero_d_m_a_1a12cd181b228127512b854b4f4a4702ad" kindref="member">Adafruit_ZeroDMA::allocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;<sp/>DMAC_CH_NUM)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DMA_STATUS_OK;<sp/></highlight><highlight class="comment">//<sp/>Already<sp/>alloc&apos;d!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>index<sp/>of<sp/>first<sp/>free<sp/>DMA<sp/>channel.<sp/><sp/>As<sp/>currently<sp/>written,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>&quot;does<sp/>not<sp/>play<sp/>well<sp/>with<sp/>others&quot;<sp/>as<sp/>it<sp/>assumes<sp/>_channelMask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>final<sp/>arbiter<sp/>of<sp/>channels<sp/>in<sp/>use<sp/>(this<sp/>is<sp/>true<sp/>only<sp/>within</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>library<sp/>--<sp/>but<sp/>other<sp/>DMA-driven<sp/>code<sp/>may<sp/>have<sp/>allocated<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>own<sp/>channel(s)<sp/>elsewhere,<sp/>sometimes<sp/>with<sp/>an<sp/>equally<sp/>broken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>approach).<sp/><sp/>A<sp/>possible<sp/>alternate<sp/>approach,<sp/>I<sp/>haven&apos;t<sp/>tested<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>yet,<sp/>might<sp/>be<sp/>to<sp/>loop<sp/>through<sp/>each<sp/>channel,<sp/>set<sp/>DMAC-&gt;CHID.bit.ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>test<sp/>whether<sp/>CHCTRLA.bit.ENABLE<sp/>is<sp/>set?<sp/><sp/>But<sp/>for<sp/>now...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>=<sp/>0;<sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;<sp/>DMAC_CH_NUM)<sp/>&amp;&amp;<sp/>(_channelMask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>++)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doesn&apos;t<sp/>help<sp/>that<sp/>code<sp/>later<sp/>does<sp/>a<sp/>software<sp/>reset<sp/>of<sp/>the<sp/>DMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>controller,<sp/>which<sp/>would<sp/>blow<sp/>out<sp/>other<sp/>DMA-using<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>anyway<sp/>(or<sp/>they&apos;re<sp/>just<sp/>as<sp/>likely<sp/>to<sp/>blow<sp/>out<sp/>this<sp/>one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>think<sp/>it&apos;s<sp/>just<sp/>an<sp/>all-or-nothing<sp/>affair...use<sp/>one<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>DMA<sp/>everything,<sp/>never<sp/>mix<sp/>and<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&gt;=<sp/>DMAC_CH_NUM)<sp/></highlight><highlight class="comment">//<sp/>No<sp/>free<sp/>channel!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DMA_STATUS_ERR_NOT_FOUND;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_channelMask)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>No<sp/>channels<sp/>allocated<sp/>yet;<sp/>initialize<sp/>DMA!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DMAC_RESERVED_CHANNELS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SAML21)<sp/>||<sp/>(SAML22)<sp/>||<sp/>(SAMC20)<sp/>||<sp/>(SAMC21)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>PM-&gt;AHBMASK.bit.DMAC_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SAMD51__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>MCLK-&gt;AHBMASK.bit.DMAC_<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>DMA<sp/>clocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>PM-&gt;AHBMASK.bit.DMAC_<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>DMA<sp/>clocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>PM-&gt;APBBMASK.bit.DMAC_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CTRL.bit.DMAENABLE<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CTRL.bit.SWRST<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>software<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>descriptor<sp/>list<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;BASEADDR.bit.BASEADDR<sp/>=<sp/>(uint32_t)_descriptor;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;WRBADDR.bit.WRBADDR<sp/>=<sp/>(uint32_t)_writeback;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(_descriptor,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_descriptor));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(_writeback,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_writeback));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>DMA<sp/>controller<sp/>with<sp/>all<sp/>priority<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CTRL.reg<sp/>=<sp/>DMAC_CTRL_DMAENABLE<sp/>|<sp/>DMAC_CTRL_LVLEN(0xF);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>DMA<sp/>interrupt<sp/>at<sp/>lowest<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>IRQn_Type<sp/>irqs[]<sp/>=<sp/>{DMAC_0_IRQn,<sp/>DMAC_1_IRQn,<sp/>DMAC_2_IRQn,<sp/>DMAC_3_IRQn,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMAC_4_IRQn};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>irqs<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>irqs[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NVIC_EnableIRQ(irqs[i]);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NVIC_SetPriority(irqs[i],<sp/>(1<sp/>&lt;&lt;<sp/>__NVIC_PRIO_BITS)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>NVIC_EnableIRQ(DMAC_IRQn);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>NVIC_SetPriority(DMAC_IRQn,<sp/>(1<sp/>&lt;&lt;<sp/>__NVIC_PRIO_BITS)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>_channelMask<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>channel<sp/>as<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>_dmaPtr[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>]<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Channel-index-to-object<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>allocated<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.ENABLE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.SWRST<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLA.bit.ENABLE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLA.bit.SWRST<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>software<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>DMAC-&gt;SWTRIGCTRL.reg<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>default<sp/>behaviors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHPRILVL.bit.PRILVL<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.TRIGSRC<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1aa276d20e9ef4b3f8cbcd8cf569497923" kindref="member">peripheralTrigger</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.TRIGACT<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1aef6d75fa171d1be7daec125b7a347363" kindref="member">triggerAction</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.BURSTLEN<sp/>=</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DMAC_CHCTRLA_BURSTLEN_SINGLE_Val;<sp/></highlight><highlight class="comment">//<sp/>Single-beat<sp/>burst<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLB.bit.LVL<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLB.bit.TRIGSRC<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1aa276d20e9ef4b3f8cbcd8cf569497923" kindref="member">peripheralTrigger</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLB.bit.TRIGACT<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1aef6d75fa171d1be7daec125b7a347363" kindref="member">triggerAction</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DMA_STATUS_OK;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1ad7c9f597b6a6fa658993a80669aa5b33" kindref="member">Adafruit_ZeroDMA::setPriority</ref>(dma_priority<sp/>pri)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHPRILVL.bit.PRILVL<sp/>=<sp/>pri;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLB.bit.LVL<sp/>=<sp/>pri;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deallocate<sp/>DMA<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>should<sp/>this<sp/>delete/deallocate<sp/>the<sp/>descriptor<sp/>list?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><ref refid="_adafruit___zero_d_m_a_8h_1ac32982e07d7b05efd5807bce8819a686" kindref="member">ZeroDMAstatus</ref><sp/><ref refid="class_adafruit___zero_d_m_a_1a8b3fbf685ae3ef8f5392a21af5836a3f" kindref="member">Adafruit_ZeroDMA::free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="_adafruit___zero_d_m_a_8h_1ac32982e07d7b05efd5807bce8819a686" kindref="member">ZeroDMAstatus</ref><sp/>status<sp/>=<sp/>DMA_STATUS_OK;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>cpu_irq_enter_critical();<sp/></highlight><highlight class="comment">//<sp/>jobStatus<sp/>is<sp/>volatile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>==<sp/>DMA_STATUS_BUSY)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>DMA_STATUS_BUSY;<sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>leave<sp/>when<sp/>busy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;<sp/>DMAC_CH_NUM)<sp/>&amp;&amp;<sp/>(_channelMask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>in-use<sp/>channel;<sp/>release<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>_channelMask<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>);<sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_channelMask)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>more<sp/>channels<sp/>in<sp/>use?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NVIC_DisableIRQ(DMAC_0_IRQn);<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DMAC-&gt;CTRL.bit.DMAENABLE<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MCLK-&gt;AHBMASK.bit.DMAC_<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NVIC_DisableIRQ(DMAC_IRQn);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DMAC-&gt;CTRL.bit.DMAENABLE<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PM-&gt;APBBMASK.bit.DMAC_<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA<sp/>clocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PM-&gt;AHBMASK.bit.DMAC_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>_dmaPtr[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>DMA_STATUS_ERR_NOT_INITIALIZED;<sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>not<sp/>in<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>DMA<sp/>transfer<sp/>job.<sp/><sp/>Channel<sp/>and<sp/>descriptors<sp/>should<sp/>be<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before<sp/>calling<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="_adafruit___zero_d_m_a_8h_1ac32982e07d7b05efd5807bce8819a686" kindref="member">ZeroDMAstatus</ref><sp/><ref refid="class_adafruit___zero_d_m_a_1a271d8c9050b100ab2fb766f07642af4a" kindref="member">Adafruit_ZeroDMA::startJob</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><ref refid="_adafruit___zero_d_m_a_8h_1ac32982e07d7b05efd5807bce8819a686" kindref="member">ZeroDMAstatus</ref><sp/>status<sp/>=<sp/>DMA_STATUS_OK;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>cpu_irq_enter_critical();<sp/></highlight><highlight class="comment">//<sp/>Job<sp/>status<sp/>is<sp/>volatile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>==<sp/>DMA_STATUS_BUSY)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>DMA_STATUS_BUSY;<sp/></highlight><highlight class="comment">//<sp/>Resource<sp/>is<sp/>busy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&gt;=<sp/>DMAC_CH_NUM)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>DMA_STATUS_ERR_NOT_INITIALIZED;<sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>not<sp/>in<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_adafruit___zero_d_m_a_1a84ae85a6a87a1388b5e070bb804500c1" kindref="member">hasDescriptors</ref><sp/>||<sp/>(_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].BTCNT.reg<sp/>&lt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>DMA_STATUS_ERR_INVALID_ARG;<sp/></highlight><highlight class="comment">//<sp/>Bad<sp/>transfer<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i,<sp/>interruptMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DMA_CALLBACK_N;<sp/>i++)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[i])</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interruptMask<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>i);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>DMA_STATUS_BUSY;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHINTENSET.reg<sp/>=</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMAC_CHINTENSET_MASK<sp/>&amp;<sp/>interruptMask;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHINTENCLR.reg<sp/>=</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMAC_CHINTENCLR_MASK<sp/>&amp;<sp/>~interruptMask;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.ENABLE<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHINTENSET.reg<sp/>=<sp/>DMAC_CHINTENSET_MASK<sp/>&amp;<sp/>interruptMask;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHINTENCLR.reg<sp/>=<sp/>DMAC_CHINTENCLR_MASK<sp/>&amp;<sp/>~interruptMask;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHCTRLA.bit.ENABLE<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>transfer<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>and<sp/>enable<sp/>callback<sp/>function<sp/>for<sp/>ZeroDMA<sp/>object.<sp/>This<sp/>can<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before<sp/>or<sp/>after<sp/>channel<sp/>and/or<sp/>descriptors<sp/>are<sp/>allocated,<sp/>but<sp/>needs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>called<sp/>before<sp/>job<sp/>is<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1ada1ef40ce048e2af885815e39859476a" kindref="member">Adafruit_ZeroDMA::setCallback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*cb)(<ref refid="class_adafruit___zero_d_m_a" kindref="compound">Adafruit_ZeroDMA</ref><sp/>*),</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_callback_type<sp/><ref refid="_fat_structs_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a82b002d9e2f796723e7e0652ee3e4d4f" kindref="member">callback</ref>[<ref refid="_fat_structs_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref>]<sp/>=<sp/>cb;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suspend/resume<sp/>don&apos;t<sp/>quite<sp/>do<sp/>what<sp/>I<sp/>thought<sp/>--<sp/>avoid<sp/>using<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1ac84c9a934b0b0533d49ba6d878ad5540" kindref="member">Adafruit_ZeroDMA::suspend</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLB.reg<sp/>|=<sp/>DMAC_CHCTRLB_CMD_SUSPEND;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>DMAC-&gt;CHCTRLB.reg<sp/>|=<sp/>DMAC_CHCTRLB_CMD_SUSPEND;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_JOB_RESUME_COUNT<sp/>10000<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1a2b9222e1b16cc0429b491b7fe093cb7a" kindref="member">Adafruit_ZeroDMA::resume</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>cpu_irq_enter_critical();<sp/></highlight><highlight class="comment">//<sp/>jobStatus<sp/>is<sp/>volatile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>==<sp/>DMA_STATUS_SUSPEND)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bitMask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLB.reg<sp/>|=<sp/>DMAC_CHCTRLB_CMD_RESUME;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHCTRLB.reg<sp/>|=<sp/>DMAC_CHCTRLB_CMD_RESUME;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(count<sp/>&lt;<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a4560f2a27bd19d833ccca47ac113a009" kindref="member">MAX_JOB_RESUME_COUNT</ref>)<sp/>&amp;&amp;<sp/>!(DMAC-&gt;BUSYCH.reg<sp/>&amp;<sp/>bitMask);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>(count<sp/>&lt;<sp/><ref refid="_adafruit___zero_d_m_a_8cpp_1a4560f2a27bd19d833ccca47ac113a009" kindref="member">MAX_JOB_RESUME_COUNT</ref>)<sp/>?<sp/>DMA_STATUS_BUSY</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>DMA_STATUS_ERR_TIMEOUT;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Abort<sp/>is<sp/>OK<sp/>though.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1af5843942940a56babc3d00d20472b0a4" kindref="member">Adafruit_ZeroDMA::abort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;=<sp/>DMAC_CH_NUM)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.ENABLE<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;<sp/></highlight><highlight class="comment">//<sp/>Select<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHCTRLA.reg<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>=<sp/>DMA_STATUS_ABORTED;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>DMA<sp/>peripheral<sp/>trigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>done<sp/>before<sp/>or<sp/>after<sp/>channel<sp/>is<sp/>allocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1ac3f324b1792f0287093cedba2f9bfc0b" kindref="member">Adafruit_ZeroDMA::setTrigger</ref>(uint8_t<sp/>trigger)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1aa276d20e9ef4b3f8cbcd8cf569497923" kindref="member">peripheralTrigger</ref><sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1ac62999634c9708aea1ee780df3f740d0" kindref="member">trigger</ref>;<sp/></highlight><highlight class="comment">//<sp/>Save<sp/>value<sp/>for<sp/>allocate()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>channel<sp/>already<sp/>allocated,<sp/>configure<sp/>peripheral<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(old<sp/>lib<sp/>required<sp/>configure<sp/>before<sp/>alloc<sp/>--<sp/>either<sp/>way<sp/>OK<sp/>now)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;<sp/>DMAC_CH_NUM)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.TRIGSRC<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1ac62999634c9708aea1ee780df3f740d0" kindref="member">trigger</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHCTRLB.bit.TRIGSRC<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1ac62999634c9708aea1ee780df3f740d0" kindref="member">trigger</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>DMA<sp/>trigger<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>done<sp/>before<sp/>or<sp/>after<sp/>channel<sp/>is<sp/>allocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1a4e863ea5e45bda38f9249d9443a55152" kindref="member">Adafruit_ZeroDMA::setAction</ref>(dma_transfer_trigger_action<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1aef6d75fa171d1be7daec125b7a347363" kindref="member">triggerAction</ref><sp/>=<sp/>action;<sp/></highlight><highlight class="comment">//<sp/>Save<sp/>value<sp/>for<sp/>allocate()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>channel<sp/>already<sp/>allocated,<sp/>configure<sp/>trigger<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(old<sp/>lib<sp/>required<sp/>configure<sp/>before<sp/>alloc<sp/>--<sp/>either<sp/>way<sp/>OK<sp/>now)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;<sp/>DMAC_CH_NUM)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.TRIGACT<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHCTRLB.bit.TRIGACT<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Issue<sp/>software<sp/>trigger.<sp/>Channel<sp/>must<sp/>be<sp/>allocated<sp/>&amp;<sp/>descriptors<sp/>added!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1ac62999634c9708aea1ee780df3f740d0" kindref="member">Adafruit_ZeroDMA::trigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&lt;=<sp/>DMAC_CH_NUM)<sp/>&amp;<sp/><ref refid="class_adafruit___zero_d_m_a_1a84ae85a6a87a1388b5e070bb804500c1" kindref="member">hasDescriptors</ref>)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;SWTRIGCTRL.reg<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">uint8_t<sp/><ref refid="class_adafruit___zero_d_m_a_1af43fc8294a0a10448909247ba60ad7a0" kindref="member">Adafruit_ZeroDMA::getChannel</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;<sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DMA<sp/>DESCRIPTOR<sp/>FUNCTIONS<sp/>------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>new<sp/>DMA<sp/>descriptor<sp/>(if<sp/>needed)<sp/>and<sp/>appends<sp/>it<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>channel&apos;s<sp/>descriptor<sp/>list.<sp/><sp/>Returns<sp/>pointer<sp/>to<sp/>DmacDescriptor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>on<sp/>various<sp/>errors.<sp/><sp/>You&apos;ll<sp/>want<sp/>to<sp/>keep<sp/>the<sp/>pointer<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>later<sp/>if<sp/>you<sp/>need<sp/>to<sp/>modify<sp/>or<sp/>free<sp/>the<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Channel<sp/>must<sp/>be<sp/>allocated<sp/>first!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">DmacDescriptor<sp/>*<ref refid="class_adafruit___zero_d_m_a_1a94112456ab7aead2acb19b10053530d3" kindref="member">Adafruit_ZeroDMA::addDescriptor</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>count,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_beat_size<sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>srcInc,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dstInc,<sp/>uint32_t<sp/>stepSize,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stepSel)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>must<sp/>be<sp/>allocated<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref><sp/>&gt;=<sp/>DMAC_CH_NUM)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>do<sp/>while<sp/>job&apos;s<sp/>busy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/>==<sp/>DMA_STATUS_BUSY)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>DmacDescriptor<sp/>*desc;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>descriptor<sp/>list<sp/>to<sp/>find<sp/>last<sp/>entry.<sp/><sp/>If<sp/>an<sp/>entry&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCADDR<sp/>value<sp/>is<sp/>0,<sp/>that&apos;s<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>and<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>un-looped.<sp/><sp/>If<sp/>the<sp/>DESCADDR<sp/>value<sp/>is<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>first<sp/>entry,<sp/>that&apos;s<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>and<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>looped.<sp/><sp/>Either<sp/>way,<sp/>set<sp/>the<sp/>last<sp/>entry&apos;s<sp/>DESCADDR<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>new<sp/>descriptor,<sp/>and<sp/>the<sp/>descriptor&apos;s<sp/>own<sp/>DESCADDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>set<sp/>later<sp/>either<sp/>to<sp/>0<sp/>or<sp/>the<sp/>list<sp/>head.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a84ae85a6a87a1388b5e070bb804500c1" kindref="member">hasDescriptors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>descriptors<sp/>must<sp/>be<sp/>128-bit<sp/>(16<sp/>byte)<sp/>aligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memalign()<sp/>is<sp/>considered<sp/>&apos;obsolete&apos;<sp/>but<sp/>it&apos;s<sp/>replacements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(aligned_alloc()<sp/>or<sp/>posix_memalign())<sp/>are<sp/>not<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>available<sp/>in<sp/>the<sp/>version<sp/>of<sp/>ARM<sp/>GCC<sp/>in<sp/>use,<sp/>but<sp/>this<sp/>is,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>here<sp/>we<sp/>are.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(desc<sp/>=<sp/>(DmacDescriptor<sp/>*)memalign(16,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DmacDescriptor))))</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>DmacDescriptor<sp/>*prev<sp/>=<sp/>&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prev-&gt;DESCADDR.reg<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(prev-&gt;DESCADDR.reg<sp/>!=<sp/>(uint32_t)&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>]))<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>(DmacDescriptor<sp/>*)prev-&gt;DESCADDR.reg;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;DESCADDR.reg<sp/>=<sp/>(uint32_t)desc;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>desc<sp/>=<sp/>&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a84ae85a6a87a1388b5e070bb804500c1" kindref="member">hasDescriptors</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bytesPerBeat;<sp/></highlight><highlight class="comment">//<sp/>Beat<sp/>transfer<sp/>size<sp/>IN<sp/>BYTES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(size)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesPerBeat<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_BEAT_SIZE_HWORD:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesPerBeat<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_BEAT_SIZE_WORD:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesPerBeat<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.VALID<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.EVOSEL<sp/>=<sp/>DMA_EVENT_OUTPUT_DISABLE;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.BLOCKACT<sp/>=<sp/>DMA_BLOCK_ACTION_NOACT;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.BEATSIZE<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.SRCINC<sp/>=<sp/>srcInc;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.DSTINC<sp/>=<sp/>dstInc;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.STEPSEL<sp/>=<sp/>stepSel;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>desc-&gt;BTCTRL.bit.STEPSIZE<sp/>=<sp/>stepSize;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>desc-&gt;BTCNT.reg<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>desc-&gt;SRCADDR.reg<sp/>=<sp/>(uint32_t)src;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcInc)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stepSel)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;SRCADDR.reg<sp/>+=<sp/>bytesPerBeat<sp/>*<sp/>count<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>stepSize);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;SRCADDR.reg<sp/>+=<sp/>bytesPerBeat<sp/>*<sp/>count;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>desc-&gt;DSTADDR.reg<sp/>=<sp/>(uint32_t)dst;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstInc)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stepSel)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;DSTADDR.reg<sp/>+=<sp/>bytesPerBeat<sp/>*<sp/>count<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>stepSize);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;DSTADDR.reg<sp/>+=<sp/>bytesPerBeat<sp/>*<sp/>count;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>desc-&gt;DESCADDR.reg<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a681b8ea014c7d8e198218756700d8926" kindref="member">loopFlag</ref><sp/>?<sp/>(uint32_t)&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>desc;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modify<sp/>DMA<sp/>descriptor<sp/>with<sp/>a<sp/>new<sp/>source<sp/>address,<sp/>destination<sp/>address<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>block<sp/>transfer<sp/>count.<sp/><sp/>All<sp/>other<sp/>attributes<sp/>(including<sp/>increment<sp/>enables,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>etc.)<sp/>are<sp/>unchanged.<sp/><sp/>Mostly<sp/>for<sp/>changing<sp/>the<sp/>data<sp/>being<sp/>pushed<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>peripheral<sp/>(DAC,<sp/>SPI,<sp/>whatev.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1a176317c57c824f223083b06568941b22" kindref="member">Adafruit_ZeroDMA::changeDescriptor</ref>(DmacDescriptor<sp/>*desc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/>uint32_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bytesPerBeat;<sp/></highlight><highlight class="comment">//<sp/>Beat<sp/>transfer<sp/>size<sp/>IN<sp/>BYTES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(desc-&gt;BTCTRL.bit.BEATSIZE)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesPerBeat<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_BEAT_SIZE_HWORD:</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesPerBeat<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_BEAT_SIZE_WORD:</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesPerBeat<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>desc-&gt;BTCNT.reg<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>desc-&gt;SRCADDR.reg<sp/>=<sp/>(uint32_t)src;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desc-&gt;BTCTRL.bit.SRCINC)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desc-&gt;BTCTRL.bit.STEPSEL)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;SRCADDR.reg<sp/>+=</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;BTCNT.reg<sp/>*<sp/>bytesPerBeat<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>desc-&gt;BTCTRL.bit.STEPSIZE);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;SRCADDR.reg<sp/>+=<sp/>desc-&gt;BTCNT.reg<sp/>*<sp/>bytesPerBeat;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>desc-&gt;DSTADDR.reg<sp/>=<sp/>(uint32_t)dst;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desc-&gt;BTCTRL.bit.DSTINC)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!desc-&gt;BTCTRL.bit.STEPSEL)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;DSTADDR.reg<sp/>+=</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;BTCNT.reg<sp/>*<sp/>bytesPerBeat<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>desc-&gt;BTCTRL.bit.STEPSIZE);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc-&gt;DSTADDR.reg<sp/>+=<sp/>desc-&gt;BTCNT.reg<sp/>*<sp/>bytesPerBeat;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I<sp/>think<sp/>this<sp/>code<sp/>is<sp/>here<sp/>by<sp/>accident<sp/>--<sp/>disabling<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_enter_critical();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DMA_STATUS_OK;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SAMD51__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;Channel[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].CHCTRLA.bit.ENABLE<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHID.bit.ID<sp/><sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>DMAC-&gt;CHCTRLA.reg<sp/>|=<sp/>DMAC_CHCTRLA_ENABLE;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_irq_leave_critical();</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>delete<sp/>descriptor,<sp/>delete<sp/>whole<sp/>descriptor<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Select<sp/>whether<sp/>channel&apos;s<sp/>descriptor<sp/>list<sp/>should<sp/>repeat<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>done<sp/>before<sp/>or<sp/>after<sp/>channel<sp/>&amp;<sp/>any<sp/>descriptors<sp/>are<sp/>allocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1abcb7a7f194c78db02c17b7dad80dcc1f" kindref="member">Adafruit_ZeroDMA::loop</ref>(</highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>loop<sp/>selection<sp/>is<sp/>&apos;sticky&apos;<sp/>--<sp/>that<sp/>is,<sp/>you<sp/>can<sp/>enable<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>looping<sp/>before<sp/>a<sp/>descriptor<sp/>list<sp/>is<sp/>built,<sp/>or<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>fact.<sp/><sp/>This<sp/>requires<sp/>some<sp/>extra<sp/>steps<sp/>in<sp/>the<sp/>library<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>avoids<sp/>a<sp/>must-do-in-X-order<sp/>constraint<sp/>on<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="class_adafruit___zero_d_m_a_1a681b8ea014c7d8e198218756700d8926" kindref="member">loopFlag</ref><sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_adafruit___zero_d_m_a_1a84ae85a6a87a1388b5e070bb804500c1" kindref="member">hasDescriptors</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Descriptor<sp/>list<sp/>already<sp/>started?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>descriptor<sp/>list<sp/>to<sp/>find<sp/>last<sp/>entry.<sp/><sp/>If<sp/>an<sp/>entry&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCADDR<sp/>value<sp/>is<sp/>0,<sp/>that&apos;s<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>and<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>un-looped.<sp/><sp/>If<sp/>the<sp/>DESCADDR<sp/>value<sp/>is<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>first<sp/>entry,<sp/>that&apos;s<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>and<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>looped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>DmacDescriptor<sp/>*desc<sp/>=<sp/>&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>];</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(desc-&gt;DESCADDR.reg<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(desc-&gt;DESCADDR.reg<sp/>!=<sp/>(uint32_t)&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>]))<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/>(DmacDescriptor<sp/>*)desc-&gt;DESCADDR.reg;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>or<sp/>unloop<sp/>descriptor<sp/>list<sp/>as<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>desc-&gt;DESCADDR.reg<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a681b8ea014c7d8e198218756700d8926" kindref="member">loopFlag</ref><sp/>?<sp/>(uint32_t)&amp;_descriptor[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MISCELLANY<sp/>--------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1af940ac0fbf99688fef10fdbeb1e92cc4" kindref="member">Adafruit_ZeroDMA::printStatus</ref>(<ref refid="_adafruit___zero_d_m_a_8h_1ac32982e07d7b05efd5807bce8819a686" kindref="member">ZeroDMAstatus</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>DMA_STATUS_JOBSTATUS)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="class_adafruit___zero_d_m_a_1a66edc3699148ad581926fa3566360f17" kindref="member">jobStatus</ref>;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;Status:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_OK:</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_ERR_NOT_FOUND:</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;NOT<sp/>FOUND&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_ERR_NOT_INITIALIZED:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;NOT<sp/>INITIALIZED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_ERR_INVALID_ARG:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;INVALID<sp/>ARGUMENT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_ERR_IO:</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;IO<sp/>ERROR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_ERR_TIMEOUT:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;TIMEOUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_BUSY:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;BUSY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_SUSPEND:</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;SUSPENDED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DMA_STATUS_ABORTED:</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;ABORTED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>0x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)s);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_adafruit___zero_d_m_a_1aed42b5b406df8f37f3f48df1b2c3e057" kindref="member">Adafruit_ZeroDMA::isActive</ref>()<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_writeback[<ref refid="class_adafruit___zero_d_m_a_1a80771921a68271f5a79ab0a6c4b1bad5" kindref="member">channel</ref>].BTCTRL.bit.VALID;</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="libraries/Adafruit_Zero_DMA_Library-1.1.1/Adafruit_ZeroDMA.cpp"/>
  </compounddef>
</doxygen>
