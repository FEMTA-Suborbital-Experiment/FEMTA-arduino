<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_adafruit___i2_c_device" kind="class" language="C++" prot="public">
    <compoundname>Adafruit_I2CDevice</compoundname>
    <includes refid="examples_2logging__example_2libraries_2_adafruit___bus_i_o_2_adafruit___i2_c_device_8h" local="no">Adafruit_I2CDevice.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_adafruit___i2_c_device_1ac08f1287f0c99b1d989bc5bf08e84470" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t Adafruit_I2CDevice::_addr</definition>
        <argsstring></argsstring>
        <name>_addr</name>
        <qualifiedname>Adafruit_I2CDevice::_addr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="29" column="11" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_adafruit___i2_c_device_1a6a0bb0bd1ffb24b2f58d41a67b6f0c20" prot="private" static="no" mutable="no">
        <type>TwoWire *</type>
        <definition>TwoWire * Adafruit_I2CDevice::_wire</definition>
        <argsstring></argsstring>
        <name>_wire</name>
        <qualifiedname>Adafruit_I2CDevice::_wire</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="30" column="11" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_adafruit___i2_c_device_1a895a7279d25777c740a32646315d0128" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::_begun</definition>
        <argsstring></argsstring>
        <name>_begun</name>
        <qualifiedname>Adafruit_I2CDevice::_begun</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="31" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_adafruit___i2_c_device_1a514410b8b50390005cd791da82087f94" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Adafruit_I2CDevice::_maxBufferSize</definition>
        <argsstring></argsstring>
        <name>_maxBufferSize</name>
        <qualifiedname>Adafruit_I2CDevice::_maxBufferSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="32" column="10" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_adafruit___i2_c_device_1afea8ccedd8c77bff545c97520d8ec31c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Adafruit_I2CDevice::Adafruit_I2CDevice</definition>
        <argsstring>(uint8_t addr, TwoWire *theWire=&amp;Wire)</argsstring>
        <name>Adafruit_I2CDevice</name>
        <qualifiedname>Adafruit_I2CDevice::Adafruit_I2CDevice</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>TwoWire *</type>
          <declname>theWire</declname>
          <defval>&amp;Wire</defval>
        </param>
        <briefdescription>
<para>Create an I2C device at a given address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The 7-bit I2C address for the device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theWire</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C bus to use, defaults to &amp;Wire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="10" column="3" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="10" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1ae02c4691dbe893c3a5a3de478d776062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Adafruit_I2CDevice::address</definition>
        <argsstring>(void)</argsstring>
        <name>address</name>
        <qualifiedname>Adafruit_I2CDevice::address</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the 7-bit address of this device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The 7-bit address of this device </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="11" column="11" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1ada579d107621ac5f5e56f91f94a93be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::begin</definition>
        <argsstring>(bool addr_detect=true)</argsstring>
        <name>begin</name>
        <qualifiedname>Adafruit_I2CDevice::begin</qualifiedname>
        <param>
          <type>bool</type>
          <declname>addr_detect</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initializes and does basic address detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr_detect</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether we should attempt to detect the I2C address with a scan. 99% of sensors/devices don&apos;t mind but once in a while, they spaz on a scan! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if I2C initialized and a device with the addr found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="12" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="30" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1afe9d8e8a154d29acaaeb1d00ddd8da08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Adafruit_I2CDevice::end</definition>
        <argsstring>(void)</argsstring>
        <name>end</name>
        <qualifiedname>Adafruit_I2CDevice::end</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>De-initialize device, turn off the Wire interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="13" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="43" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1ac7492b543fe4c0bb0d94a7bf1915cb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::detected</definition>
        <argsstring>(void)</argsstring>
        <name>detected</name>
        <qualifiedname>Adafruit_I2CDevice::detected</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Scans I2C for the address - note will give a false-positive if there&apos;s no pullups on I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if I2C initialized and a device with the addr found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="14" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="62" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1afeeccb3147b2f0340c65d2c0c1ce3ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::read</definition>
        <argsstring>(uint8_t *buffer, size_t len, bool stop=true)</argsstring>
        <name>read</name>
        <qualifiedname>Adafruit_I2CDevice::read</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Read from I2C into a buffer from the I2C device. Cannot be more than <ref refid="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" kindref="member">maxBufferSize()</ref> bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer of data to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes from buffer to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to send an I2C STOP signal on read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if read was successful, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="16" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="176" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1aa64a3c83aa776a3f383bc1df24ca1998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::write</definition>
        <argsstring>(const uint8_t *buffer, size_t len, bool stop=true, const uint8_t *prefix_buffer=nullptr, size_t prefix_len=0)</argsstring>
        <name>write</name>
        <qualifiedname>Adafruit_I2CDevice::write</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>prefix_buffer</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>prefix_len</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write a buffer or two to the I2C device. Cannot be more than <ref refid="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" kindref="member">maxBufferSize()</ref> bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer of data to write. This is const to ensure the content of this buffer doesn&apos;t change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes from buffer to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to optional array of data to write before buffer. Cannot be more than <ref refid="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" kindref="member">maxBufferSize()</ref> bytes. This is const to ensure the content of this buffer doesn&apos;t change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes from prefix buffer to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to send an I2C STOP signal on write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if write was successful, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="17" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="95" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1af04af7e2918c873215ce949ce05ebe33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::write_then_read</definition>
        <argsstring>(const uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop=false)</argsstring>
        <name>write_then_read</name>
        <qualifiedname>Adafruit_I2CDevice::write_then_read</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>write_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>write_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>read_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>read_len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Write some data, then read some data from I2C into another buffer. Cannot be more than <ref refid="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" kindref="member">maxBufferSize()</ref> bytes. The buffers can point to same/overlapping locations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>write_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer of data to write from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes from buffer to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer of data to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes from buffer to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to send an I2C STOP signal between the write and read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if write &amp; read was successful, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="19" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="240" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1a784c398626837ef911ce7e69b0807be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::setSpeed</definition>
        <argsstring>(uint32_t desiredclk)</argsstring>
        <name>setSpeed</name>
        <qualifiedname>Adafruit_I2CDevice::setSpeed</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>desiredclk</declname>
        </param>
        <briefdescription>
<para>Change the I2C clock speed to desired (relies on underlying Wire support! </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desiredclk</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired I2C SCL frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this platform supports changing I2C speed. Not necessarily that the speed was achieved! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="22" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="263" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Adafruit_I2CDevice::maxBufferSize</definition>
        <argsstring>()</argsstring>
        <name>maxBufferSize</name>
        <qualifiedname>Adafruit_I2CDevice::maxBufferSize</qualifiedname>
        <briefdescription>
<para>How many bytes we can read in a transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the Wire receive/transmit buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="26" column="10" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1afea8ccedd8c77bff545c97520d8ec31c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Adafruit_I2CDevice::Adafruit_I2CDevice</definition>
        <argsstring>(uint8_t addr, TwoWire *theWire=&amp;Wire)</argsstring>
        <name>Adafruit_I2CDevice</name>
        <qualifiedname>Adafruit_I2CDevice::Adafruit_I2CDevice</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>TwoWire *</type>
          <declname>theWire</declname>
          <defval>&amp;Wire</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="10" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1ae02c4691dbe893c3a5a3de478d776062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Adafruit_I2CDevice::address</definition>
        <argsstring>(void)</argsstring>
        <name>address</name>
        <qualifiedname>Adafruit_I2CDevice::address</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="11" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1ada579d107621ac5f5e56f91f94a93be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::begin</definition>
        <argsstring>(bool addr_detect=true)</argsstring>
        <name>begin</name>
        <qualifiedname>Adafruit_I2CDevice::begin</qualifiedname>
        <param>
          <type>bool</type>
          <declname>addr_detect</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="12" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1afe9d8e8a154d29acaaeb1d00ddd8da08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Adafruit_I2CDevice::end</definition>
        <argsstring>(void)</argsstring>
        <name>end</name>
        <qualifiedname>Adafruit_I2CDevice::end</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="13" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1ac7492b543fe4c0bb0d94a7bf1915cb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::detected</definition>
        <argsstring>(void)</argsstring>
        <name>detected</name>
        <qualifiedname>Adafruit_I2CDevice::detected</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="14" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1afeeccb3147b2f0340c65d2c0c1ce3ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::read</definition>
        <argsstring>(uint8_t *buffer, size_t len, bool stop=true)</argsstring>
        <name>read</name>
        <qualifiedname>Adafruit_I2CDevice::read</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="16" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1aa64a3c83aa776a3f383bc1df24ca1998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::write</definition>
        <argsstring>(const uint8_t *buffer, size_t len, bool stop=true, const uint8_t *prefix_buffer=nullptr, size_t prefix_len=0)</argsstring>
        <name>write</name>
        <qualifiedname>Adafruit_I2CDevice::write</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>prefix_buffer</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>prefix_len</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="17" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1af04af7e2918c873215ce949ce05ebe33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::write_then_read</definition>
        <argsstring>(const uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop=false)</argsstring>
        <name>write_then_read</name>
        <qualifiedname>Adafruit_I2CDevice::write_then_read</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>write_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>write_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>read_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>read_len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="19" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1a784c398626837ef911ce7e69b0807be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::setSpeed</definition>
        <argsstring>(uint32_t desiredclk)</argsstring>
        <name>setSpeed</name>
        <qualifiedname>Adafruit_I2CDevice::setSpeed</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>desiredclk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="22" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Adafruit_I2CDevice::maxBufferSize</definition>
        <argsstring>()</argsstring>
        <name>maxBufferSize</name>
        <qualifiedname>Adafruit_I2CDevice::maxBufferSize</qualifiedname>
        <briefdescription>
<para>How many bytes we can read in a transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the Wire receive/transmit buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="26" column="10" bodyfile="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="26" bodyend="26"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_adafruit___i2_c_device_1a057354cd908d37ce5b612540d7c7b794" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::_read</definition>
        <argsstring>(uint8_t *buffer, size_t len, bool stop)</argsstring>
        <name>_read</name>
        <qualifiedname>Adafruit_I2CDevice::_read</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="33" column="8" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.cpp" bodystart="189" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_adafruit___i2_c_device_1a057354cd908d37ce5b612540d7c7b794" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Adafruit_I2CDevice::_read</definition>
        <argsstring>(uint8_t *buffer, size_t len, bool stop)</argsstring>
        <name>_read</name>
        <qualifiedname>Adafruit_I2CDevice::_read</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="33" column="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>&lt; The class which defines how we will talk to this device over I2C </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" line="8" column="1" bodyfile="examples/logging_example/libraries/Adafruit_BusIO/Adafruit_I2CDevice.h" bodystart="8" bodyend="34"/>
    <listofallmembers>
      <member refid="class_adafruit___i2_c_device_1ac08f1287f0c99b1d989bc5bf08e84470" prot="private" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>_addr</name></member>
      <member refid="class_adafruit___i2_c_device_1a895a7279d25777c740a32646315d0128" prot="private" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>_begun</name></member>
      <member refid="class_adafruit___i2_c_device_1a514410b8b50390005cd791da82087f94" prot="private" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>_maxBufferSize</name></member>
      <member refid="class_adafruit___i2_c_device_1a057354cd908d37ce5b612540d7c7b794" prot="private" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>_read</name></member>
      <member refid="class_adafruit___i2_c_device_1a057354cd908d37ce5b612540d7c7b794" prot="private" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>_read</name></member>
      <member refid="class_adafruit___i2_c_device_1a6a0bb0bd1ffb24b2f58d41a67b6f0c20" prot="private" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>_wire</name></member>
      <member refid="class_adafruit___i2_c_device_1afea8ccedd8c77bff545c97520d8ec31c" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>Adafruit_I2CDevice</name></member>
      <member refid="class_adafruit___i2_c_device_1afea8ccedd8c77bff545c97520d8ec31c" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>Adafruit_I2CDevice</name></member>
      <member refid="class_adafruit___i2_c_device_1ae02c4691dbe893c3a5a3de478d776062" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>address</name></member>
      <member refid="class_adafruit___i2_c_device_1ae02c4691dbe893c3a5a3de478d776062" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>address</name></member>
      <member refid="class_adafruit___i2_c_device_1ada579d107621ac5f5e56f91f94a93be3" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>begin</name></member>
      <member refid="class_adafruit___i2_c_device_1ada579d107621ac5f5e56f91f94a93be3" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>begin</name></member>
      <member refid="class_adafruit___i2_c_device_1ac7492b543fe4c0bb0d94a7bf1915cb2a" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>detected</name></member>
      <member refid="class_adafruit___i2_c_device_1ac7492b543fe4c0bb0d94a7bf1915cb2a" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>detected</name></member>
      <member refid="class_adafruit___i2_c_device_1afe9d8e8a154d29acaaeb1d00ddd8da08" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>end</name></member>
      <member refid="class_adafruit___i2_c_device_1afe9d8e8a154d29acaaeb1d00ddd8da08" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>end</name></member>
      <member refid="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>maxBufferSize</name></member>
      <member refid="class_adafruit___i2_c_device_1a20c6ac28cbaa9e5f63ef6d4687fd4e60" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>maxBufferSize</name></member>
      <member refid="class_adafruit___i2_c_device_1afeeccb3147b2f0340c65d2c0c1ce3ea6" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>read</name></member>
      <member refid="class_adafruit___i2_c_device_1afeeccb3147b2f0340c65d2c0c1ce3ea6" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>read</name></member>
      <member refid="class_adafruit___i2_c_device_1a784c398626837ef911ce7e69b0807be7" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>setSpeed</name></member>
      <member refid="class_adafruit___i2_c_device_1a784c398626837ef911ce7e69b0807be7" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>setSpeed</name></member>
      <member refid="class_adafruit___i2_c_device_1aa64a3c83aa776a3f383bc1df24ca1998" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>write</name></member>
      <member refid="class_adafruit___i2_c_device_1aa64a3c83aa776a3f383bc1df24ca1998" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>write</name></member>
      <member refid="class_adafruit___i2_c_device_1af04af7e2918c873215ce949ce05ebe33" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>write_then_read</name></member>
      <member refid="class_adafruit___i2_c_device_1af04af7e2918c873215ce949ce05ebe33" prot="public" virt="non-virtual"><scope>Adafruit_I2CDevice</scope><name>write_then_read</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
